struct vertexIN
{  
  float2 texcoord	: TEXCOORD0;    
};

bool eq (float3 s, float3 t){
	return !(s.x == t.x && s.y == t.y && s.z == t.z);
}

float4 main(vertexIN vIN, 
			uniform float threshold,
			uniform float alpha,	
			uniform float toneCheat,							
			uniform sampler2D tex : TEXUNIT0,
			uniform sampler2D depth : TEXUNIT1,
			uniform sampler2D normals : TEXUNIT2,
			uniform sampler2D rand : TEXUNIT3):COLOR {					
			
	float x = vIN.texcoord.x;
	float y = vIN.texcoord.y;
	
	if (toneCheat != 0)	
		return float4(tex2D(tex, float2(x,y)).xyz+toneCheat, 1);
	
	if (threshold != 0 && tex2D(rand, float2(x,y)).r <= threshold*0.05){
		//Compute Toon
		float3 c = tex2D(tex, float2(x,y)).xyz;
		float cL = length(c);
		float f = 1.0;			
		
		if (cL < 0.2)
			f = 0.7;
		else if (cL < 0.4)
			f  = 0.9;
		else if (cL < 0.5)
			f = 0.95;
		
		float pixelSizeX = 0.0015f, pixelSizeY = 0.0015f;	
		
		float r = 1.0, g = 1.0, b = 1.0;
			
		float3 z = tex2D(normals,float2(x,y)).xyz;
		
	    if(eq(z,tex2D(normals,float2(x+pixelSizeX,y)).xyz)){
	        f*=0.3;
	    }else if(eq(z,tex2D(normals,float2(x+pixelSizeX*2.0,y)).xyz)){
	        f*=0.8;
	    }
	    if(eq(z,tex2D(normals,float2(x-pixelSizeX,y)).xyz)){
	        f*=0.3;
	    }else if(eq(z,tex2D(normals,float2(x-pixelSizeX*2.0,y)).xyz)){
	        f*=0.8;
	    }
	    if(eq(z,tex2D(normals,float2(x,y-pixelSizeY)).xyz)){
	        f*=0.3;
	    }else if(eq(z,tex2D(normals,float2(x,y-pixelSizeY*2.0)).xyz)){
	        f*=0.8;
	    }
	    if(eq(z,tex2D(normals,float2(x,y+pixelSizeY)).xyz)){
	        f*=0.3;
	    }else if(eq(z,tex2D(normals,float2(x,y+pixelSizeY*2.0)).xyz)){
	        f*=0.8;
	    }
	        
	    c = float3(r,g,b)*f;    
	    return float4(tex2D(tex, float2(x,y)).xyz*c, 1);
    }
	//Compute Bloom
	if (alpha > 0){	
		float4 sum = {0,0,0,0};
		float4 bloomOut;
		for (int i = -4; i < 4; ++i)
			for (int j = -3; j < 3; ++j)
				sum += tex2D(tex, float2(x,y)+float2(j,i)*0.004)*0.25;
				
		if (tex2D(tex, float2(x,y)).r < 0.3)
			bloomOut = sum*sum*0.012 + tex2D(tex, float2(x,y));
		else{
			if (tex2D(tex, float2(x,y)).r < 0.5)
				bloomOut = sum*sum*0.009 + tex2D(tex, float2(x,y));
			else
				bloomOut = sum*sum*0.0075 + tex2D(tex, float2(x,y));
		}		
		
		bloomOut = alpha*bloomOut + (1-alpha)*tex2D(tex, float2(x,y));
		
		return bloomOut;
	}
	
	float debugBorder = 0.0;
	float totStrength = 1.38;
	float strength = 0.07;
	float offset = 18.0;
	float falloff = 0.000002;
	float rad = 0.006;
	int samples = 16;
	float invSamples = 1.0/16.0;

	float3 pSphere[16] = float3[](
		float3(0.53812504, 0.18565957, -0.43192),
		float3(0.13790712, 0.24864247, 0.44301823),
		float3(0.33715037, 0.56794053, -0.005789503),
		float3(-0.6999805, -0.04511441, -0.0019965635),
		float3(0.06896307, -0.15983082, -0.85477847),
		float3(0.056099437, 0.006954967, -0.1843352),
		float3(-0.014653638, 0.14027752, 0.0762037),
		float3(0.010019933, -0.1924225, -0.034443386),
		float3(-0.35775623, -0.5301969, -0.43581226),
		float3(-0.3169221, 0.106360726, 0.015860917),
		float3(0.010350345, -0.58698344, 0.0046293875),
		float3(-0.08972908, -0.49408212, 0.3287904),
		float3(0.7119986, -0.0154690035, -0.09183723),
		float3(-0.053382345, 0.059675813, -0.5411899),
		float3(0.035267662, -0.063188605, 0.54602677),
		float3(-0.47761092, 0.2847911, -0.0271716)
	);
	
	float currentPixelDepth = tex2D(depth, float2(x,y)).r;
	
	//if (currentPixelDepth > 0.99)
	//	return tex2D(tex, float2(x,y));	

   float3 fres = normalize((tex2D(rand,float2(x,y)*offset).xyz*2.0) - float3(1.0));
 
   float4 currentPixelSample = tex2D(normals,float2(x,y));   
 
   // current fragment coords in screen space
   float3 ep = float3(float2(x,y),currentPixelDepth);
 // get the normal of current fragment
   float3 norm = currentPixelSample.xyz;
 
   float bl = 0.0;
   // adjust for the depth ( not sure if this is good..)
   float radD = rad/currentPixelDepth;
 
   float3 ray, se, occNorm;
   float occluderDepth, depthDifference, normDiff;
 
   for(int i=0; i<samples;++i)
   {
      // get a vector (randomized inside of a sphere with radius 1.0) from a texture and reflect it
      ray = radD*reflect(pSphere[i],fres);
 
      // if the ray is outside the hemisphere then change direction
      se = ep + sign(dot(ray,norm) )*ray;
 
      // get the depth of the occluder fragment
      float4 occluderFragment = tex2D(normals,se.xy);
 
      // get the normal of the occluder fragment
      occNorm = occluderFragment.xyz;
 
      // if depthDifference is negative = occluder is behind current fragment
      depthDifference = currentPixelDepth-tex2D(depth, se.xy).r;
 
      // calculate the difference between the normals as a weight
 
      normDiff = (1.0-dot(occNorm,norm));
      // the falloff equation, starts at falloff and is kind of 1/x^2 falling
      bl += step(falloff,depthDifference)*normDiff*(1.0-smoothstep(falloff,strength,depthDifference));
   }
 
   // output the result
   float ao = 1.0-totStrength*bl*invSamples;
        
   if (x >= debugBorder)   
   	return float4(ao*tex2D(tex, float2(x,y)).xyz,1);   
   return tex2D(tex, float2(x,y));   	  

}
